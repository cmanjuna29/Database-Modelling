
-- Query 1
-- Find out all the shifts of employee Nancy Smith
SELECT 
    e.First_Name, e.Last_Name, s.Start_Time, s.End_Time, s.Day
FROM
    Employee e
        INNER JOIN
    Employee_Shift es ON e.Employee_ID = es.Employee_ID
        INNER JOIN
    Shift s ON s.Shift_ID = es.Shift_ID
WHERE
    e.First_Name = 'Nancy'
        AND e.Last_Name = 'Smith'
ORDER BY s.Day;

-- Query 2
-- Find out all the employees working on Sunday at closing time
SELECT 
    e.First_Name, e.Last_Name, s.Start_Time, s.End_Time, s.Day
FROM
    employee e
        JOIN
    Employee_Shift es ON e.Employee_ID = es.Employee_ID
        JOIN
    shift s ON s.Shift_ID = es.Shift_ID
WHERE
    s.Day = 'Sun' AND s.End_Time = '8PM';

-- Query 3
-- Find out phone number of employee Taylor Martin
SELECT 
    e.First_Name, e.Last_Name, ep.Phone_Number
FROM
    employee e
        JOIN
    Employee_phone ep ON e.Employee_ID = ep.Employee_ID
WHERE
    e.First_Name = 'Taylor'
        AND e.Last_Name = 'Martin';

-- Query 4
-- find out total cost of purchase date wise
SELECT 
    iv.PurchaseDate,
    SUM(iv.cost) AS 'Total Cost',
    MONTH(iv.PurchaseDate) AS 'Month',
    YEAR(iv.PurchaseDate) AS 'Year'
FROM
    item_Vendor iv
GROUP BY iv.PurchaseDate
ORDER BY SUM(iv.cost) DESC
LIMIT 10;

-- Query 5
-- find out demand of each product
SELECT 
    op.Product_ID, SUM(op.Quantity) AS 'Demand', p.Product_Name
FROM
    order_product op
        INNER JOIN
    product p ON op.Product_ID = p.Product_ID
GROUP BY op.Product_ID
ORDER BY SUM(op.Quantity) DESC;

-- Query 6
-- find out total revenue generated by each product
SELECT 
    op.Product_ID,
    (SUM(op.Quantity) * p.price) AS 'Total Revenue',
    p.Product_Name
FROM
    order_product op
        INNER JOIN
    product p ON op.Product_ID = p.Product_ID
GROUP BY op.Product_ID
ORDER BY (SUM(op.Quantity) * p.price) DESC;

-- Query 7
-- find out average amount for each payment type
SELECT 
    paymenttype, AVG(totalprice)
FROM
    orders
GROUP BY paymenttype
ORDER BY AVG(totalprice) DESC;

-- Query 8
-- find out average order amount for each day of the week
SELECT 
    DAYOFWEEK(orderdate) AS 'Day of the Week',
    AVG(totalprice) AS 'Average Order Amount'
FROM
    orders
GROUP BY DAYOFWEEK(orderdate)
ORDER BY AVG(totalprice) DESC;

-- Query 9
-- find out total sales for each month
SELECT 
    MONTH(orderdate) AS 'Month',
    SUM(totalprice) AS 'Total Sales'
FROM
    orders
GROUP BY MONTH(orderdate)
ORDER BY SUM(totalprice) DESC
LIMIT 3;

-- Query 10
-- find out hours per week done by each position
SELECT 
    p.Position_Description AS 'Position',
    (COUNT(es.employee_ID) * 2) AS 'Total Hours Per Week'
FROM
    positions p
        JOIN
    employee e ON p.Position_ID = e.Position_ID
        JOIN
    employee_shift es ON e.employee_ID = es.employee_ID
GROUP BY p.Position_Description;

-- Query 11
-- find out inventory days to expire and categorize the days
set @report_date = cast('2022/02/02' as date);
SELECT 
    inventory_category,
    SUM(cost) AS total_cost,
    SUM(quantity) AS total_quantity
FROM
    (SELECT 
        *,
            CASE
                WHEN days_left < 0 THEN 'Inventory Expired'
                WHEN days_left < 10 THEN 'Inventory at risk'
                ELSE 'Good Inventory'
            END AS inventory_category
    FROM
        (SELECT 
        iv.Item_ID,
            iv.Vendor_ID,
            iv.PurchaseDate,
            iv.UnitMeasure,
            iv.Quantity,
            iv.UnitCost,
            iv.Cost,
            i.shelflife - DATEDIFF(@report_date, iv.PurchaseDate) AS days_left
    FROM
        item_vendor iv
    LEFT JOIN item i ON iv.item_id = i.item_id) a) b
GROUP BY b.inventory_category;
